<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">
	<!--Builtin-->
	<xs:simpleType name="NoitaBool">
		<xs:restriction base="xs:string">
			<xs:enumeration value="0" />
			<xs:enumeration value="1" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="Hex8">
		<xs:restriction base="xs:string">
			<xs:pattern value="[0-9A-Fa-f]{8}|0" />
		</xs:restriction>
	</xs:simpleType>
	<!-- ConfigExplosion -->
	<xs:complexType name="ConfigDamageCritical" mixed="true">
		<xs:annotation> <xs:documentation> <![CDATA[```cpp<br>class ConfigDamageCritical {<br>&emsp;&emsp;&emsp;&emsp;int chance; //  the chance of a critical hit. ]0-100[ - can be higher than 100% - then will multiply the multiplier by the extra<br>&emsp;&emsp;&emsp;&emsp;float damage_multiplier; //  multiplier that is applied to all damage types on a critical hit<br>&emsp;&emsp;&emsp;&emsp;bool mSucceeded;<br>};<br>```]]> </xs:documentation> </xs:annotation>
		<xs:attribute name="chance" type="xs:int" default="0">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>int chance; //  the chance of a critical hit. ]0-100[ - can be higher than 100% - then will multiply the multiplier by the extra<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="damage_multiplier" type="xs:decimal" default="0">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>float damage_multiplier; //  multiplier that is applied to all damage types on a critical hit<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="mSucceeded" type="NoitaBool" default="0">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>bool mSucceeded;<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="ConfigExplosion" mixed="true">
		<xs:annotation> <xs:documentation> <![CDATA[```cpp<br>class ConfigExplosion {<br>&emsp;&emsp;&emsp;&emsp;bool never_cache; //  if set, won't ever cache and the explosion happens that frame. Used for projectiles<br>&emsp;&emsp;&emsp;&emsp;float explosion_radius; //  Explosion radius, used to find the peasants and physics bodies that are thrown into the air<br>&emsp;&emsp;&emsp;&emsp;std::string explosion_sprite; //  sprite animation of the explosion that we play<br>&emsp;&emsp;&emsp;&emsp;bool explosion_sprite_emissive; //  if 1, sprite is emissive<br>&emsp;&emsp;&emsp;&emsp;bool explosion_sprite_additive; //  if 1, sprite is additive<br>&emsp;&emsp;&emsp;&emsp;bool explosion_sprite_random_rotation; //  if true, rotates the sprite to random 90 degrees<br>&emsp;&emsp;&emsp;&emsp;float explosion_sprite_lifetime; //  if 0, finds the lifetime based on the rect animation currently playing. If not 0 it is seconds how long does the explosion sprite stay in the world<br>&emsp;&emsp;&emsp;&emsp;float damage; //  how much damage does this do to living entities<br>&emsp;&emsp;&emsp;&emsp;float camera_shake; //  camera shake - how much we shake the camera<br>&emsp;&emsp;&emsp;&emsp;bool particle_effect; //  Should we use the ParticleEffect::DoExplosion()<br>&emsp;&emsp;&emsp;&emsp;std::string load_this_entity; //  if set, this entity is loaded when the explosion is queued<br>&emsp;&emsp;&emsp;&emsp;bool light_enabled; //  Should the explosion emit light to its surroundings?<br>&emsp;&emsp;&emsp;&emsp;float light_fade_time; //  The time it takes for the light flash to fade out<br>&emsp;&emsp;&emsp;&emsp;unsignedint light_r; //  Color red 0-255<br>&emsp;&emsp;&emsp;&emsp;unsignedint light_g; //  Color green 0-255<br>&emsp;&emsp;&emsp;&emsp;unsignedint light_b; //  Color blue 0-255<br>&emsp;&emsp;&emsp;&emsp;float light_radius_coeff; //  The radius of the light will be explosion_radius * light_radius_coeff<br>&emsp;&emsp;&emsp;&emsp;bool hole_enabled; //  Do we remove ground, creata a crater<br>&emsp;&emsp;&emsp;&emsp;bool destroy_non_platform_solid_enabled; //  Do we remove solid cells that aren't platforms?<br>&emsp;&emsp;&emsp;&emsp;int electricity_count; //  How many electricity entitities should we create?<br>&emsp;&emsp;&emsp;&emsp;int min_radius_for_cracks; //  Cracks are created if explosion_radius is larger than this<br>&emsp;&emsp;&emsp;&emsp;int crack_count; //  How many crack entitities should we create?<br>&emsp;&emsp;&emsp;&emsp;float knockback_force; //  How far do entities get thrown if a knockback occurs? final_knocback = explosion_radius * knockback_force * target.inv_normalized_distance_from_explosion / target.mass<br>&emsp;&emsp;&emsp;&emsp;bool hole_destroy_liquid; //  Do we destroy the liquid cells we ran into, or do we just throw them into to the air?<br>&emsp;&emsp;&emsp;&emsp;bool hole_destroy_physics_dynamic; //  Do we destroy the dynamic physics cells we encountered?<br>&emsp;&emsp;&emsp;&emsp;std::string create_cell_material; //  The material destroyed cells might turn into.<br>&emsp;&emsp;&emsp;&emsp;int create_cell_probability; //  The probability a destroyed cell is turned into 'create_cell_material'<br>&emsp;&emsp;&emsp;&emsp;int background_lightning_count; //  Parallax background lightning count is set to this on explosion<br>&emsp;&emsp;&emsp;&emsp;std::string spark_material; //  spark material, TODO moved these to use a special Serializer<br>&emsp;&emsp;&emsp;&emsp;int material_sparks_min_hp; //  How many sparks are we creating (rand max)<br>&emsp;&emsp;&emsp;&emsp;int material_sparks_probability; //  How many sparks are we creating (rand max)<br>&emsp;&emsp;&emsp;&emsp;int material_sparks_count_min; //  How many sparks are we creating (rand min)<br>&emsp;&emsp;&emsp;&emsp;int material_sparks_count_max; //  How many sparks are we creating (rand max)<br>&emsp;&emsp;&emsp;&emsp;bool material_sparks_enabled; //  Should we create few fire particles around the explosion<br>&emsp;&emsp;&emsp;&emsp;bool material_sparks_real; //  if the spark particles created are real or fake<br>&emsp;&emsp;&emsp;&emsp;bool material_sparks_scale_with_hp; //  if true, will create more sparks the harder the material<br>&emsp;&emsp;&emsp;&emsp;bool sparks_enabled; //  Should we create few fire particles around the explosion<br>&emsp;&emsp;&emsp;&emsp;int sparks_count_min; //  How many sparks are we creating (rand min)<br>&emsp;&emsp;&emsp;&emsp;int sparks_count_max; //  How many sparks are we creating (rand max)<br>&emsp;&emsp;&emsp;&emsp;float sparks_inner_radius_coeff; //  If 'sparks_enabled', Sparks are created in the area between circles defined by 'explosion_radius'*'sparks_inner_radius_coeff' and 'explosion_radius'<br>&emsp;&emsp;&emsp;&emsp;bool stains_enabled; //  Should we stain the ground and other particles<br>&emsp;&emsp;&emsp;&emsp;float stains_radius; //  The distance from the edge of the hole to the edge of the stained area, 0.0f for default which is 0.3 * explosion_radius<br>&emsp;&emsp;&emsp;&emsp;int ray_energy; //  This is the energy we have per ray. Could be called 'penetration power' or something like that. If cells have a hp of 20 rays with 100 energy can penetrate 5 cells<br>&emsp;&emsp;&emsp;&emsp;int max_durability_to_destroy; //  When destroying cells only cells with a durability <= max_durability_to_destroy will be affected<br>&emsp;&emsp;&emsp;&emsp;int gore_particle_count; //  How many particles to create in case we do gore stuff?<br>&emsp;&emsp;&emsp;&emsp;bool shake_vegetation; //  Should we shake vegetation around the explosion (uses the area of stain_image to find vegetation)<br>&emsp;&emsp;&emsp;&emsp;bool damage_mortals; //  Look for peasants and throw them into the air? Remember to enabled physics_throw as well if you want them to actually fly<br>&emsp;&emsp;&emsp;&emsp;bool physics_throw_enabled; //  Should we throw physics objects into the air, also peasants<br>&emsp;&emsp;&emsp;&emsp;float physics_multiplier_ragdoll_force; //  treat the ragdolls a bit differently from other physics objects, to get them to fly nicely<br>&emsp;&emsp;&emsp;&emsp;float cell_explosion_power; //  used when a solid cell explodes as the multiplier to how big the radius is going to be<br>&emsp;&emsp;&emsp;&emsp;float cell_explosion_radius_min; //  when cell explodes, this is the minimum radius that explosion is made of<br>&emsp;&emsp;&emsp;&emsp;float cell_explosion_radius_max; //  when cell explodes, this is the minimum radius that explosion is made of<br>&emsp;&emsp;&emsp;&emsp;float cell_explosion_velocity_min; //  cell explodes only when body velocity is greater than this<br>&emsp;&emsp;&emsp;&emsp;float cell_explosion_damage_required; //  how much fire damage is required before this explodes<br>&emsp;&emsp;&emsp;&emsp;float cell_explosion_probability; //  this is used when there's a tiny contact that doesn't cause an explosion, in those cases this is used as a random to check if we should explode or not<br>&emsp;&emsp;&emsp;&emsp;float cell_explosion_power_ragdoll_coeff; //  ragdoll cells destruction power is multiplied with this<br>&emsp;&emsp;&emsp;&emsp;bool pixel_sprites_enabled; //  if enabled will carve out the pixel sprites<br>&emsp;&emsp;&emsp;&emsp;bool is_digger; //  if 1, we apply some special digger logic to this explosion<br>&emsp;&emsp;&emsp;&emsp;bool audio_enabled; //  Do we play an explosion sound?<br>&emsp;&emsp;&emsp;&emsp;std::string audio_event_name; //  Name of audio event in 'explosion' audio bank. If not set, will default to 'explosion' or 'explosion_small' based on explosion radius.<br>&emsp;&emsp;&emsp;&emsp;float audio_liquid_amount_normalized; //  value of the 'liquid_amount' parameter passed to the explosion's audio event<br>&emsp;&emsp;&emsp;&emsp;int explosion_delay_id; //  for delayed barrel explosions... this has to be set and has to be the same for the explosions for there to be a delay<br>&emsp;&emsp;&emsp;&emsp;EntityID who_is_responsible; //  the entity that caused the explosion<br>&emsp;&emsp;&emsp;&emsp;bool null_damage; //  if set, will not call DamageModelSystem::TakeDamage()<br>&emsp;&emsp;&emsp;&emsp;EntityID dont_damage_this; //  if set, this entity doesn't receive damage from the explosion<br>&emsp;&emsp;&emsp;&emsp;EntityID impl_send_message_to_this;<br>&emsp;&emsp;&emsp;&emsp;types_vector2 impl_position;<br>&emsp;&emsp;&emsp;&emsp;int32 impl_delay_frame;<br>&emsp;&emsp;&emsp;&emsp;ValueRange physics_explosion_power; //  how hard do we throw physics objects<br>&emsp;&emsp;&emsp;&emsp;ValueRangeInt delay; //  if > 0, the explosion occurs with a delay chosen randomly from this range and is never buffered<br>&emsp;&emsp;&emsp;&emsp;ConfigDamageCritical damage_critical; //  critical damage config. NOTE: must be already calculated ('chance' does nothing).<br>};<br>```]]> </xs:documentation> </xs:annotation>
			<xs:all>
				<xs:element name="damage_critical" type="ConfigDamageCritical" minOccurs="0"/>
			</xs:all>
		<xs:attribute name="never_cache" type="NoitaBool" default="0">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>bool never_cache; //  if set, won't ever cache and the explosion happens that frame. Used for projectiles<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="explosion_radius" type="xs:decimal" default="0">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>float explosion_radius; //  Explosion radius, used to find the peasants and physics bodies that are thrown into the air<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="explosion_sprite" type="xs:string" default="">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>std::string explosion_sprite; //  sprite animation of the explosion that we play<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="explosion_sprite_emissive" type="NoitaBool" default="0">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>bool explosion_sprite_emissive; //  if 1, sprite is emissive<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="explosion_sprite_additive" type="NoitaBool" default="0">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>bool explosion_sprite_additive; //  if 1, sprite is additive<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="explosion_sprite_random_rotation" type="NoitaBool" default="0">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>bool explosion_sprite_random_rotation; //  if true, rotates the sprite to random 90 degrees<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="explosion_sprite_lifetime" type="xs:decimal" default="0">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>float explosion_sprite_lifetime; //  if 0, finds the lifetime based on the rect animation currently playing. If not 0 it is seconds how long does the explosion sprite stay in the world<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="damage" type="xs:decimal" default="0">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>float damage; //  how much damage does this do to living entities<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="camera_shake" type="xs:decimal" default="0">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>float camera_shake; //  camera shake - how much we shake the camera<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="particle_effect" type="NoitaBool" default="0">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>bool particle_effect; //  Should we use the ParticleEffect::DoExplosion()<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="load_this_entity" type="xs:string" default="">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>std::string load_this_entity; //  if set, this entity is loaded when the explosion is queued<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="light_enabled" type="NoitaBool" default="0">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>bool light_enabled; //  Should the explosion emit light to its surroundings?<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="light_fade_time" type="xs:decimal" default="0">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>float light_fade_time; //  The time it takes for the light flash to fade out<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="light_r" type="xs:unsignedInt" default="0">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>unsignedint light_r; //  Color red 0-255<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="light_g" type="xs:unsignedInt" default="0">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>unsignedint light_g; //  Color green 0-255<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="light_b" type="xs:unsignedInt" default="0">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>unsignedint light_b; //  Color blue 0-255<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="light_radius_coeff" type="xs:decimal" default="0">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>float light_radius_coeff; //  The radius of the light will be explosion_radius * light_radius_coeff<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="hole_enabled" type="NoitaBool" default="0">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>bool hole_enabled; //  Do we remove ground, creata a crater<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="destroy_non_platform_solid_enabled" type="NoitaBool" default="0">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>bool destroy_non_platform_solid_enabled; //  Do we remove solid cells that aren't platforms?<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="electricity_count" type="xs:int" default="0">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>int electricity_count; //  How many electricity entitities should we create?<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="min_radius_for_cracks" type="xs:int" default="0">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>int min_radius_for_cracks; //  Cracks are created if explosion_radius is larger than this<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="crack_count" type="xs:int" default="0">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>int crack_count; //  How many crack entitities should we create?<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="knockback_force" type="xs:decimal" default="0">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>float knockback_force; //  How far do entities get thrown if a knockback occurs? final_knocback = explosion_radius * knockback_force * target.inv_normalized_distance_from_explosion / target.mass<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="hole_destroy_liquid" type="NoitaBool" default="0">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>bool hole_destroy_liquid; //  Do we destroy the liquid cells we ran into, or do we just throw them into to the air?<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="hole_destroy_physics_dynamic" type="NoitaBool" default="0">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>bool hole_destroy_physics_dynamic; //  Do we destroy the dynamic physics cells we encountered?<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="create_cell_material" type="xs:string" default="">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>std::string create_cell_material; //  The material destroyed cells might turn into.<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="create_cell_probability" type="xs:int" default="0">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>int create_cell_probability; //  The probability a destroyed cell is turned into 'create_cell_material'<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="background_lightning_count" type="xs:int" default="0">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>int background_lightning_count; //  Parallax background lightning count is set to this on explosion<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="spark_material" type="xs:string" default="">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>std::string spark_material; //  spark material, TODO moved these to use a special Serializer<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="material_sparks_min_hp" type="xs:int" default="0">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>int material_sparks_min_hp; //  How many sparks are we creating (rand max)<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="material_sparks_probability" type="xs:int" default="0">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>int material_sparks_probability; //  How many sparks are we creating (rand max)<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="material_sparks_count_min" type="xs:int" default="0">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>int material_sparks_count_min; //  How many sparks are we creating (rand min)<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="material_sparks_count_max" type="xs:int" default="0">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>int material_sparks_count_max; //  How many sparks are we creating (rand max)<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="material_sparks_enabled" type="NoitaBool" default="0">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>bool material_sparks_enabled; //  Should we create few fire particles around the explosion<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="material_sparks_real" type="NoitaBool" default="0">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>bool material_sparks_real; //  if the spark particles created are real or fake<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="material_sparks_scale_with_hp" type="NoitaBool" default="0">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>bool material_sparks_scale_with_hp; //  if true, will create more sparks the harder the material<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="sparks_enabled" type="NoitaBool" default="0">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>bool sparks_enabled; //  Should we create few fire particles around the explosion<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="sparks_count_min" type="xs:int" default="0">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>int sparks_count_min; //  How many sparks are we creating (rand min)<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="sparks_count_max" type="xs:int" default="0">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>int sparks_count_max; //  How many sparks are we creating (rand max)<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="sparks_inner_radius_coeff" type="xs:decimal" default="0">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>float sparks_inner_radius_coeff; //  If 'sparks_enabled', Sparks are created in the area between circles defined by 'explosion_radius'*'sparks_inner_radius_coeff' and 'explosion_radius'<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="stains_enabled" type="NoitaBool" default="0">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>bool stains_enabled; //  Should we stain the ground and other particles<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="stains_radius" type="xs:decimal" default="0">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>float stains_radius; //  The distance from the edge of the hole to the edge of the stained area, 0.0f for default which is 0.3 * explosion_radius<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="ray_energy" type="xs:int" default="0">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>int ray_energy; //  This is the energy we have per ray. Could be called 'penetration power' or something like that. If cells have a hp of 20 rays with 100 energy can penetrate 5 cells<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="max_durability_to_destroy" type="xs:int" default="0">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>int max_durability_to_destroy; //  When destroying cells only cells with a durability <= max_durability_to_destroy will be affected<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="gore_particle_count" type="xs:int" default="0">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>int gore_particle_count; //  How many particles to create in case we do gore stuff?<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="shake_vegetation" type="NoitaBool" default="0">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>bool shake_vegetation; //  Should we shake vegetation around the explosion (uses the area of stain_image to find vegetation)<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="damage_mortals" type="NoitaBool" default="0">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>bool damage_mortals; //  Look for peasants and throw them into the air? Remember to enabled physics_throw as well if you want them to actually fly<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="physics_throw_enabled" type="NoitaBool" default="0">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>bool physics_throw_enabled; //  Should we throw physics objects into the air, also peasants<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="physics_multiplier_ragdoll_force" type="xs:decimal" default="0">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>float physics_multiplier_ragdoll_force; //  treat the ragdolls a bit differently from other physics objects, to get them to fly nicely<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="cell_explosion_power" type="xs:decimal" default="0">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>float cell_explosion_power; //  used when a solid cell explodes as the multiplier to how big the radius is going to be<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="cell_explosion_radius_min" type="xs:decimal" default="0">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>float cell_explosion_radius_min; //  when cell explodes, this is the minimum radius that explosion is made of<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="cell_explosion_radius_max" type="xs:decimal" default="0">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>float cell_explosion_radius_max; //  when cell explodes, this is the minimum radius that explosion is made of<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="cell_explosion_velocity_min" type="xs:decimal" default="0">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>float cell_explosion_velocity_min; //  cell explodes only when body velocity is greater than this<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="cell_explosion_damage_required" type="xs:decimal" default="0">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>float cell_explosion_damage_required; //  how much fire damage is required before this explodes<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="cell_explosion_probability" type="xs:decimal" default="0">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>float cell_explosion_probability; //  this is used when there's a tiny contact that doesn't cause an explosion, in those cases this is used as a random to check if we should explode or not<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="cell_explosion_power_ragdoll_coeff" type="xs:decimal" default="0">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>float cell_explosion_power_ragdoll_coeff; //  ragdoll cells destruction power is multiplied with this<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="pixel_sprites_enabled" type="NoitaBool" default="0">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>bool pixel_sprites_enabled; //  if enabled will carve out the pixel sprites<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="is_digger" type="NoitaBool" default="0">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>bool is_digger; //  if 1, we apply some special digger logic to this explosion<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="audio_enabled" type="NoitaBool" default="0">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>bool audio_enabled; //  Do we play an explosion sound?<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="audio_event_name" type="xs:string" default="">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>std::string audio_event_name; //  Name of audio event in 'explosion' audio bank. If not set, will default to 'explosion' or 'explosion_small' based on explosion radius.<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="audio_liquid_amount_normalized" type="xs:decimal" default="0">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>float audio_liquid_amount_normalized; //  value of the 'liquid_amount' parameter passed to the explosion's audio event<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="explosion_delay_id" type="xs:int" default="0">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>int explosion_delay_id; //  for delayed barrel explosions... this has to be set and has to be the same for the explosions for there to be a delay<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<!-- Some Unknown Type: EntityID for who_is_responsible -->
		<xs:attribute name="null_damage" type="NoitaBool" default="0">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>bool null_damage; //  if set, will not call DamageModelSystem::TakeDamage()<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<!-- Some Unknown Type: EntityID for dont_damage_this -->
		<!-- Some Unknown Type: EntityID for impl_send_message_to_this -->
		<!-- Some Unknown Type: types_vector2 for impl_position -->
		<xs:attribute name="impl_delay_frame" type="xs:int" default="0">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>int32 impl_delay_frame;<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="physics_explosion_power.min" type="xs:decimal" default="0">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>ValueRange physics_explosion_power; //  how hard do we throw physics objects<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="physics_explosion_power.max" type="xs:decimal" default="0">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>ValueRange physics_explosion_power; //  how hard do we throw physics objects<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="delay.min" type="xs:int" default="0">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>ValueRangeInt delay; //  if > 0, the explosion occurs with a delay chosen randomly from this range and is never buffered<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="delay.max" type="xs:int" default="0">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>ValueRangeInt delay; //  if > 0, the explosion occurs with a delay chosen randomly from this range and is never buffered<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
<!-- ConfigExplosion -->
	<!--Builtin-->
	<xs:simpleType name="CELL_TYPE">
		<xs:restriction base="xs:string">
			<xs:enumeration value="solid" />
			<xs:enumeration value="liquid" />
			<xs:enumeration value="fire" />
			<xs:enumeration value="gas" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="REACTION_DIRECTION">
		<xs:restriction base="xs:string">
			<xs:enumeration value="none" />
			<xs:enumeration value="top" />
			<xs:enumeration value="bottom" />
			<xs:enumeration value="left" />
			<xs:enumeration value="right" />
		</xs:restriction>
	</xs:simpleType>

	<!-- Material Graphics Edge Images Type -->
	<xs:complexType name="MaterialGraphicsEdgeImages">
		<xs:choice>
			<xs:element name="Image" maxOccurs="unbounded">
				<xs:complexType mixed="true">
					<xs:attribute name="do_only_horizontal_stripe" type="NoitaBool" />
					<xs:attribute name="do_only_vertical_stripe" type="NoitaBool" />
					<xs:attribute name="allow_random_rotation" type="NoitaBool" />
					<xs:attribute name="filename" type="xs:string" />
					<xs:attribute name="min_angle" type="xs:integer" />
					<xs:attribute name="max_angle" type="xs:integer" />
				</xs:complexType>
			</xs:element>
		</xs:choice>
	</xs:complexType>

	<!-- Material Graphics Edge Type -->
	<xs:complexType name="MaterialGraphicsEdge" mixed="true">
		<xs:sequence>
			<xs:element name="EdgeGraphics">
				<xs:complexType mixed="true">
					<xs:sequence>
						<xs:element name="Images" type="MaterialGraphicsEdgeImages" />
					</xs:sequence>
					<xs:attribute name="color" type="Hex8" />
					<xs:attribute name="overwrite" type="NoitaBool" />
					<xs:attribute name="percent" type="xs:decimal" />
					<xs:attribute name="require_same_material" type="NoitaBool" />
					<xs:attribute name="require_same_material_type" type="NoitaBool" />
					<!-- enum? -->
					<xs:attribute name="type" type="xs:string" />
					<xs:attribute name="z" type="xs:integer" />
				</xs:complexType>
			</xs:element>
		</xs:sequence>
	</xs:complexType>

	<!-- Material Graphics Type -->
	<xs:complexType name="MaterialGraphics" mixed="true">
		<xs:choice>
			<xs:element name="Edge" type="MaterialGraphicsEdge" minOccurs="0" />
		</xs:choice>
		<xs:attribute name="color" type="Hex8" default="00000000">
			<xs:annotation>
				<xs:documentation />
			</xs:annotation>
		</xs:attribute>
		<!-- enum? -->
		<xs:attribute name="fire_colors_index" type="xs:integer" default="0">
			<xs:annotation>
				<xs:documentation />
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="is_grass" type="NoitaBool" default="0">
			<xs:annotation>
				<xs:documentation />
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="is_grass_hashed" type="NoitaBool" default="0">
			<xs:annotation>
				<xs:documentation />
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="normal_mapped" type="NoitaBool" default="0">
			<xs:annotation>
				<xs:documentation />
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="pixel_all_around" type="Hex8" default="00000000">
			<xs:annotation>
				<xs:documentation />
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="pixel_bottom" type="Hex8" default="00000000">
			<xs:annotation>
				<xs:documentation />
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="pixel_bottom_left" type="Hex8" default="00000000">
			<xs:annotation>
				<xs:documentation />
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="pixel_bottom_right" type="Hex8" default="00000000">
			<xs:annotation>
				<xs:documentation />
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="pixel_left" type="Hex8" default="00000000">
			<xs:annotation>
				<xs:documentation />
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="pixel_lonely" type="Hex8" default="00000000">
			<xs:annotation>
				<xs:documentation />
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="pixel_right" type="Hex8" default="00000000">
			<xs:annotation>
				<xs:documentation />
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="pixel_top" type="Hex8" default="00000000">
			<xs:annotation>
				<xs:documentation />
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="pixel_top_left" type="Hex8" default="00000000">
			<xs:annotation>
				<xs:documentation />
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="pixel_top_right" type="Hex8" default="00000000">
			<xs:annotation>
				<xs:documentation />
			</xs:annotation>
		</xs:attribute>
		<!-- huh> -->
		<xs:attribute name="randomize_colors" type="NoitaBool" default="0">
			<xs:annotation>
				<xs:documentation />
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="texture_file" type="xs:string" default="">
			<xs:annotation>
				<xs:documentation>path</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>

	<!-- Material Status Effect Type -->
	<xs:complexType name="MaterialStatusEffects">
		<xs:choice minOccurs="1" maxOccurs="unbounded">
			<xs:element name="Ingestion">
				<xs:complexType>
					<xs:choice>
						<xs:element name="StatusEffect" minOccurs="1"
							maxOccurs="unbounded">
							<xs:complexType>
								<xs:attribute name="type" type="xs:string" />
								<xs:attribute name="amount" type="xs:decimal" />
							</xs:complexType>
						</xs:element>
					</xs:choice>
				</xs:complexType>
			</xs:element>
			<xs:element name="Stains">
				<xs:complexType>
					<xs:choice>
						<xs:element name="StatusEffect" minOccurs="1"
							maxOccurs="unbounded">
							<xs:complexType>
								<xs:attribute name="type" type="xs:string" />
							</xs:complexType>
						</xs:element>
					</xs:choice>
				</xs:complexType>
			</xs:element>
		</xs:choice>
	</xs:complexType>

	<!-- Material Particle Effect Type -->
	<xs:complexType name="MaterialParticleEffect" mixed="true">
		<xs:attribute name="vel.y" type="xs:decimal" />
		<xs:attribute name="vel_random.min_x" type="xs:decimal" />
		<xs:attribute name="vel_random.max_x" type="xs:decimal" />
		<xs:attribute name="vel_random.min_y" type="xs:decimal" />
		<xs:attribute name="vel_random.max_y" type="xs:decimal" />
		<xs:attribute name="lifetime.min" type="xs:decimal" />
		<xs:attribute name="lifetime.max" type="xs:decimal" />
		<xs:attribute name="gravity.x" type="xs:decimal" />
		<xs:attribute name="gravity.y" type="xs:decimal" />
		<xs:attribute name="render_on_grid" type="NoitaBool" />
		<xs:attribute name="particle_single_width" type="NoitaBool" />
		<xs:attribute name="draw_as_long" type="NoitaBool" />
		<xs:attribute name="airflow_force" type="xs:decimal" />
		<xs:attribute name="airflow_scale" type="xs:decimal" />
		<xs:attribute name="friction" type="xs:decimal" />
		<xs:attribute name="probability" type="xs:decimal" />
		<xs:attribute name="count.min" type="xs:nonNegativeInteger" />
		<xs:attribute name="count.max" type="xs:nonNegativeInteger" />
		<!-- ? -->
		<xs:attribute name="m_material_id" type="xs:integer" />
	</xs:complexType>

	<!-- Material Type -->
	<xs:complexType name="Material" mixed="true">
		<!-- Material Docs -->

		<!-- Material Docs -->
		<xs:choice minOccurs="0" maxOccurs="unbounded">
			<xs:element name="Graphics" type="MaterialGraphics" minOccurs="0" maxOccurs="1" />
			<xs:element name="StatusEffects" type="MaterialStatusEffects" minOccurs="0"
				maxOccurs="1" />
			<xs:element name="ParticleEffect" type="MaterialParticleEffect" minOccurs="0"
				maxOccurs="1" />
			<xs:element name="ExplosionConfig" type="ConfigExplosion" minOccurs="0"
				maxOccurs="1" />
		</xs:choice>
		<!-- Material Attributes -->

		<!-- Material Attributes -->
	</xs:complexType>

	<!-- Material Reactions -->
	<xs:complexType name="MaterialReactions">
		<!-- Reaction Docs --><xs:annotation><xs:documentation><![CDATA[<br>```cpp<br>class Reaction {<br>&emsp;&emsp;&emsp;&emsp;bool fast_reaction = 0; //  Makes the reaction go faster<br>&emsp;&emsp;&emsp;&emsp;int probability = 0; //  If the cells are selected this is the percentage chance the reaction occurs<br>&emsp;&emsp;&emsp;&emsp;std::string input_cell1; //  The first cell in the reaction<br>&emsp;&emsp;&emsp;&emsp;std::string output_cell1; //  The material input_cell1 is converted to<br>&emsp;&emsp;&emsp;&emsp;std::string input_cell2; //  The second cell in the reaction<br>&emsp;&emsp;&emsp;&emsp;std::string output_cell2; //  The material input_cell2 is converted to<br>&emsp;&emsp;&emsp;&emsp;std::string input_cell3 = ""; //  If this is empty its a 2 cell reaction, if it's not then it's a 3 cell reaction, and output_cell3 must be set<br>&emsp;&emsp;&emsp;&emsp;std::string output_cell3 = ""; //  If this is empty its a 2 cell reaction, if it's not then it's a 3 cell reaction, and input_cell3 must be set<br>&emsp;&emsp;&emsp;&emsp;std::string cosmetic_particle = "";<br>&emsp;&emsp;&emsp;&emsp;int req_lifetime = 0; //  Only do the reaction if input_cell1 has lived longer than this<br>&emsp;&emsp;&emsp;&emsp;int blob_radius1 = 0; //  Radius of pixels of input_cell1 to react<br>&emsp;&emsp;&emsp;&emsp;int blob_radius2 = 0; //  Radius of pixels of input_cell1 to react<br>&emsp;&emsp;&emsp;&emsp;bool blob_restrict_to_input_material1 = 1;<br>&emsp;&emsp;&emsp;&emsp;bool blob_restrict_to_input_material2 = 1;<br>&emsp;&emsp;&emsp;&emsp;bool destroy_horizontally_lonely_pixels = 0;<br>&emsp;&emsp;&emsp;&emsp;REACTION_DIRECTION direction = none; //  Only do the reaction if input_cell2 is in this direction from input_cell2<br>&emsp;&emsp;&emsp;&emsp;bool convert_all = 0; //  If true floodfills the connected region of each input cell type and converts them to their respective output<br>&emsp;&emsp;&emsp;&emsp;std::string entity = ""; //  Loads this entity at the reaction coords when it happens<br>&emsp;&emsp;&emsp;&emsp;float audio_fx_volume_1 = 0;<br>};<br>```<br>]]></xs:documentation></xs:annotation><!-- Reaction Docs -->
		<xs:choice>
			<xs:element name="ExplosionConfig" type="ConfigExplosion" minOccurs="0" />
		</xs:choice>
		<!-- Reaction Attributes -->
		<xs:attribute name="fast_reaction" type="NoitaBool" default="0">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>bool fast_reaction = 0; //  Makes the reaction go faster<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="probability" type="xs:int" default="0">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>int probability = 0; //  If the cells are selected this is the percentage chance the reaction occurs<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="input_cell1" type="xs:string" use="required">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>std::string input_cell1; //  The first cell in the reaction<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="output_cell1" type="xs:string" use="required">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>std::string output_cell1; //  The material input_cell1 is converted to<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="input_cell2" type="xs:string" use="required">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>std::string input_cell2; //  The second cell in the reaction<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="output_cell2" type="xs:string" use="required">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>std::string output_cell2; //  The material input_cell2 is converted to<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="input_cell3" type="xs:string" default="">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>std::string input_cell3 = ""; //  If this is empty its a 2 cell reaction, if it's not then it's a 3 cell reaction, and output_cell3 must be set<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="output_cell3" type="xs:string" default="">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>std::string output_cell3 = ""; //  If this is empty its a 2 cell reaction, if it's not then it's a 3 cell reaction, and input_cell3 must be set<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="cosmetic_particle" type="xs:string" default="">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>std::string cosmetic_particle = "";<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="req_lifetime" type="xs:int" default="0">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>int req_lifetime = 0; //  Only do the reaction if input_cell1 has lived longer than this<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="blob_radius1" type="xs:int" default="0">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>int blob_radius1 = 0; //  Radius of pixels of input_cell1 to react<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="blob_radius2" type="xs:int" default="0">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>int blob_radius2 = 0; //  Radius of pixels of input_cell1 to react<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="blob_restrict_to_input_material1" type="NoitaBool" default="1">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>bool blob_restrict_to_input_material1 = 1;<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="blob_restrict_to_input_material2" type="NoitaBool" default="1">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>bool blob_restrict_to_input_material2 = 1;<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="destroy_horizontally_lonely_pixels" type="NoitaBool" default="0">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>bool destroy_horizontally_lonely_pixels = 0;<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="direction" type="REACTION_DIRECTION" default="none">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>REACTION_DIRECTION direction = none; //  Only do the reaction if input_cell2 is in this direction from input_cell2<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="convert_all" type="NoitaBool" default="0">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>bool convert_all = 0; //  If true floodfills the connected region of each input cell type and converts them to their respective output<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="entity" type="xs:string" default="">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>std::string entity = ""; //  Loads this entity at the reaction coords when it happens<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="audio_fx_volume_1" type="xs:decimal" default="0">
			<xs:annotation>
				<xs:documentation><![CDATA[```cpp<br>float audio_fx_volume_1 = 0;<br>```]]></xs:documentation>
			</xs:annotation>
		</xs:attribute>
<!-- Reaction Attributes -->
	</xs:complexType>

	<!-- Materials -->
	<xs:element name="Materials">
		<xs:complexType mixed="true">
			<xs:choice maxOccurs="unbounded" minOccurs="0">
				<xs:element name="CellData" type="Material" minOccurs="0"
					maxOccurs="unbounded" />
				<xs:element name="CellDataChild" minOccurs="0" maxOccurs="unbounded">
					<xs:complexType mixed="true">
						<xs:complexContent>
							<xs:extension base="Material">
								<xs:attribute name="_parent" type="xs:string"
									use="required" />
								<xs:attribute name="_inherit_reactions"
									type="NoitaBool" />
							</xs:extension>
						</xs:complexContent>
					</xs:complexType>
				</xs:element>
				<xs:element name="Reaction" type="MaterialReactions" minOccurs="0"
					maxOccurs="unbounded" />
				<xs:element name="ReqReaction" type="MaterialReactions" minOccurs="0"
					maxOccurs="unbounded" />
			</xs:choice>
		</xs:complexType>
		<xs:unique name="UniqueMaterialName">
			<xs:selector xpath="CellData | CellDataChild" />
			<xs:field xpath="@name" />
		</xs:unique>
		<xs:unique name="UniqueMaterialWang">
			<xs:selector xpath="CellData | CellDataChild" />
			<xs:field xpath="@wang_color" />
		</xs:unique>
	</xs:element>
</xs:schema>
